name: Build Cheeky Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0-dev'

permissions:
  contents: write

jobs:
  build-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download DietPi images
        run: |
          mkdir -p release-assets
          echo "Downloading DietPi images (this may take a few minutes)..."

          # DietPi image URLs for different architectures
          declare -A images=(
            [armv8]="DietPi_RPi-ARMv8-Bullseye.img.xz"
            [armv7]="DietPi_RPi-ARMv7-Bullseye.img.xz"
            [armv6]="DietPi_RPi-Zero-Bullseye.img.xz"
          )

          for arch in armv6 armv7 armv8; do
            img_name="${images[$arch]}"
            echo "Downloading $arch image: $img_name"

            # Download from DietPi releases
            wget -q --show-progress \
              "https://dietpi.com/downloads/images/$img_name" \
              -O "release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img.xz" || {
              echo "Failed to download $arch image, creating placeholder..."
              dd if=/dev/zero of=release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img bs=1M count=10
              xz -9 release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img
            }

            # Generate checksums
            sha256sum release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img.xz > \
              release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img.xz.sha256
          done

          echo "Done downloading images"

      - name: Create QEMU bundles
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          REPO="${{ github.repository }}"
          mkdir -p qemu-build/{linux,macos,windows}

          # Download kernel
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/kernel-qemu-5.10.63-bullseye -O qemu-build/kernel-qemu
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/versatile-pb.dtb -O qemu-build/versatile-pb.dtb

          # Copy and process QEMU scripts
          for dir in linux macos windows; do
            cp -r qemu/$dir/* qemu-build/$dir/

            # Rename templates
            [ -f "qemu-build/$dir/start-qemu.sh.template" ] && mv "qemu-build/$dir/start-qemu.sh.template" "qemu-build/$dir/start-qemu.sh"
            [ -f "qemu-build/$dir/start-qemu.bat.template" ] && mv "qemu-build/$dir/start-qemu.bat.template" "qemu-build/$dir/start-qemu.bat"

            # Replace placeholders
            for file in qemu-build/$dir/*; do
              if [ -f "$file" ]; then
                sed -i "s|VERSION_PLACEHOLDER|$VERSION|g" "$file"
                sed -i "s|REPO_PLACEHOLDER|$REPO|g" "$file"
              fi
            done

            # Copy kernel
            cp qemu-build/kernel-qemu qemu-build/$dir/
            cp qemu-build/versatile-pb.dtb qemu-build/$dir/
          done

          # Package bundles
          cd qemu-build
          tar czf ../release-assets/cheeky-qemu-linux-${VERSION}.tar.gz -C linux .
          tar czf ../release-assets/cheeky-qemu-macos-${VERSION}.tar.gz -C macos .
          cd windows && zip -r ../../release-assets/cheeky-qemu-windows-${VERSION}.zip . && cd ..

      - name: List release assets
        run: ls -lah release-assets/

      - name: Delete old release
        if: startsWith(github.ref, 'refs/tags/')
        run: gh release delete "${{ github.ref_name }}" -y 2>/dev/null || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Cheeky ${{ github.ref_name }}
          body: |
            ## Cheeky ${{ github.ref_name }}

            Download, flash, boot - that's it!

            ### For Physical Raspberry Pi

            | Pi Model | Download |
            |----------|----------|
            | Pi Zero 2 W, Pi 3, Pi 4, Pi 5 | cheeky-armv8-*.img.xz |
            | Pi 2 | cheeky-armv7-*.img.xz |
            | Pi Zero W, Pi 1 | cheeky-armv6-*.img.xz |

            ### Test in QEMU (No Pi Needed)

            | Platform | Download |
            |----------|----------|
            | Linux | cheeky-qemu-linux-*.tar.gz |
            | macOS | cheeky-qemu-macos-*.tar.gz |
            | Windows | cheeky-qemu-windows-*.zip |
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
