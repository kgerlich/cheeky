name: Build Cheeky Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0-dev'

permissions:
  contents: write

jobs:
  build-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download and customize DietPi images
        run: |
          set -e
          mkdir -p release-assets
          echo "Building Cheeky DietPi images..."

          # Install dependencies for image manipulation
          sudo apt-get update -qq
          sudo apt-get install -y -qq kpartx qemu-utils binfmt-support qemu-user-static > /dev/null 2>&1

          # DietPi image URLs (from official GitHub releases)
          declare -A images=(
            [armv8]="DietPi_RPi-ARMv8-Bookworm"
            [armv7]="DietPi_RPi-ARMv7-Bookworm"
            [armv6]="DietPi_RPi-Zero-Bookworm"
          )

          for arch in armv6 armv7 armv8; do
            img_base="${images[$arch]}"
            echo ""
            echo "=========================================="
            echo "Building $arch image..."
            echo "=========================================="

            # Download DietPi image from official repository
            echo "Downloading DietPi $arch image..."
            wget -q --show-progress \
              "https://github.com/MichaIng/DietPi/releases/download/v9.6/DietPi_RPi-${arch^^}-Bookworm.img.xz" \
              -O "/tmp/dietpi-${arch}.img.xz" || {
              echo "Failed to download $arch image"
              exit 1
            }

            # Extract image
            echo "Extracting image..."
            xz -d "/tmp/dietpi-${arch}.img.xz"
            IMG_FILE="/tmp/dietpi-${arch}.img"

            # Resize image to add space for customizations
            echo "Resizing image..."
            resize2fs -f "$IMG_FILE" 2G || true

            # Get image details
            LOOP_DEV=$(sudo losetup -f)
            echo "Using loop device: $LOOP_DEV"

            # Mount and customize image
            echo "Mounting image..."
            sudo losetup "$LOOP_DEV" "$IMG_FILE"
            sudo partprobe "$LOOP_DEV"

            # Create mount point
            sudo mkdir -p /mnt/cheeky-${arch}
            sudo mount "${LOOP_DEV}p2" /mnt/cheeky-${arch}

            # Copy Cheeky configuration files
            echo "Installing Cheeky components..."
            sudo cp -r config/* /mnt/cheeky-${arch}/root/ 2>/dev/null || true
            sudo cp -r docs /mnt/cheeky-${arch}/root/cheeky-docs 2>/dev/null || true

            # Create setup marker
            sudo touch /mnt/cheeky-${arch}/root/.cheeky-version-${{ steps.version.outputs.VERSION }}

            # Cleanup
            echo "Finalizing image..."
            sudo umount /mnt/cheeky-${arch}
            sudo losetup -d "$LOOP_DEV"
            sudo rmdir /mnt/cheeky-${arch}

            # Compress final image
            echo "Compressing image..."
            xz -9v "$IMG_FILE"

            # Move to release assets
            mv "$IMG_FILE.xz" "release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img.xz"

            # Generate checksum
            sha256sum "release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img.xz" > \
              "release-assets/cheeky-${arch}-${{ steps.version.outputs.VERSION }}.img.xz.sha256"

            echo "âœ“ $arch image complete"
          done

          echo ""
          echo "=========================================="
          echo "All images built successfully!"
          echo "=========================================="
          ls -lah release-assets/

      - name: Create QEMU bundles
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          REPO="${{ github.repository }}"
          mkdir -p qemu-build/{linux,macos,windows}

          # Download kernel
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/kernel-qemu-5.10.63-bullseye -O qemu-build/kernel-qemu
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/versatile-pb.dtb -O qemu-build/versatile-pb.dtb

          # Copy and process QEMU scripts
          for dir in linux macos windows; do
            cp -r qemu/$dir/* qemu-build/$dir/

            # Rename templates
            [ -f "qemu-build/$dir/start-qemu.sh.template" ] && mv "qemu-build/$dir/start-qemu.sh.template" "qemu-build/$dir/start-qemu.sh"
            [ -f "qemu-build/$dir/start-qemu.bat.template" ] && mv "qemu-build/$dir/start-qemu.bat.template" "qemu-build/$dir/start-qemu.bat"

            # Replace placeholders
            for file in qemu-build/$dir/*; do
              if [ -f "$file" ]; then
                sed -i "s|VERSION_PLACEHOLDER|$VERSION|g" "$file"
                sed -i "s|REPO_PLACEHOLDER|$REPO|g" "$file"
              fi
            done

            # Copy kernel
            cp qemu-build/kernel-qemu qemu-build/$dir/
            cp qemu-build/versatile-pb.dtb qemu-build/$dir/
          done

          # Package bundles
          cd qemu-build
          tar czf ../release-assets/cheeky-qemu-linux-${VERSION}.tar.gz -C linux .
          tar czf ../release-assets/cheeky-qemu-macos-${VERSION}.tar.gz -C macos .
          cd windows && zip -r ../../release-assets/cheeky-qemu-windows-${VERSION}.zip . && cd ..

      - name: List release assets
        run: ls -lah release-assets/

      - name: Delete old release
        if: startsWith(github.ref, 'refs/tags/')
        run: gh release delete "${{ github.ref_name }}" -y 2>/dev/null || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Cheeky ${{ github.ref_name }}
          body: |
            ## Cheeky ${{ github.ref_name }}

            Download, flash, boot - that's it!

            ### For Physical Raspberry Pi

            | Pi Model | Download |
            |----------|----------|
            | Pi Zero 2 W, Pi 3, Pi 4, Pi 5 | cheeky-armv8-*.img.xz |
            | Pi 2 | cheeky-armv7-*.img.xz |
            | Pi Zero W, Pi 1 | cheeky-armv6-*.img.xz |

            ### Test in QEMU (No Pi Needed)

            | Platform | Download |
            |----------|----------|
            | Linux | cheeky-qemu-linux-*.tar.gz |
            | macOS | cheeky-qemu-macos-*.tar.gz |
            | Windows | cheeky-qemu-windows-*.zip |
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
