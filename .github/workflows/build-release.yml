name: Build Cheeky Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0-dev'

permissions:
  contents: write

jobs:
  build-release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Download Raspberry Pi OS Lite ARM64 image
        run: |
          mkdir -p release-assets
          mkdir -p /tmp/cheeky-build
          cd /tmp/cheeky-build

          echo "Downloading Raspberry Pi OS Lite ARM64 image..."
          wget -q --show-progress \
            "https://downloads.raspberrypi.org/raspios_lite_arm64/images/raspios_lite_arm64-2024-11-19/2024-11-19-raspios-bookworm-arm64-lite.img.xz" \
            -O raspios-lite-arm64.img.xz || {
            echo "ERROR: Failed to download Raspberry Pi OS image"
            exit 1
          }

          echo "Extracting image..."
          xz -d raspios-lite-arm64.img.xz

          echo "Image ready"
          ls -lh raspios-lite-arm64.img

      - name: Customize image for Cheeky
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          cd /tmp/cheeky-build

          # Install image manipulation tools
          sudo apt-get update -qq
          sudo apt-get install -y -qq qemu-utils > /dev/null 2>&1

          IMAGE_FILE="raspios-lite-arm64.img"
          echo "Customizing image for Cheeky (using $IMAGE_FILE)..."

          # Use qemu-nbd to mount Raspberry Pi OS image
          sudo modprobe nbd max_part=16
          sudo qemu-nbd -f raw --connect=/dev/nbd0 "$IMAGE_FILE"
          sleep 2

          # Find partition (usually p1 on cloud images)
          PART_DEV="/dev/nbd0p1"
          if [ ! -b "$PART_DEV" ]; then
            echo "ERROR: Partition $PART_DEV not found"
            sudo qemu-nbd --disconnect /dev/nbd0
            exit 1
          fi

          echo "Mounting partition: $PART_DEV"
          sudo mkdir -p /mnt/cheeky-img
          sudo mount "$PART_DEV" /mnt/cheeky-img

          if mountpoint -q /mnt/cheeky-img; then
            echo "Installing Cheeky components..."

            # Copy configuration files
            sudo mkdir -p /mnt/cheeky-img/root/cheeky
            sudo cp -r ${GITHUB_WORKSPACE}/config /mnt/cheeky-img/root/cheeky/ 2>/dev/null || true
            sudo cp -r ${GITHUB_WORKSPACE}/docs /mnt/cheeky-img/root/cheeky/ 2>/dev/null || true
            sudo touch /mnt/cheeky-img/root/.cheeky-$VERSION

            echo "Customization complete"
            sudo umount /mnt/cheeky-img
          else
            echo "ERROR: Could not mount filesystem"
            sudo qemu-nbd --disconnect /dev/nbd0
            exit 1
          fi

          # Cleanup
          sudo rmdir /mnt/cheeky-img 2>/dev/null || true
          sudo qemu-nbd --disconnect /dev/nbd0

          echo "Image customization complete"
          ls -lh "$IMAGE_FILE"

      - name: Create QEMU qcow2 image
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          cd /tmp/cheeky-build

          IMAGE_FILE="raspios-lite-arm64.img"
          echo "Converting raw to compressed qcow2 for QEMU..."
          qemu-img convert -c -O qcow2 "$IMAGE_FILE" cheeky-qemu-raspios-${VERSION}.qcow2

          echo "Compressed image size:"
          ls -lh cheeky-qemu-raspios-${VERSION}.qcow2

          sha256sum cheeky-qemu-raspios-${VERSION}.qcow2 > cheeky-qemu-raspios-${VERSION}.qcow2.sha256

          # Move to release assets
          cp cheeky-qemu-raspios-${VERSION}.qcow2* ${GITHUB_WORKSPACE}/release-assets/

          echo "QEMU image ready"
          ls -lh ${GITHUB_WORKSPACE}/release-assets/cheeky-qemu-raspios-${VERSION}.qcow2*

      - name: Create physical Pi img.xz image
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          cd /tmp/cheeky-build

          IMAGE_FILE="raspios-lite-arm64.img"
          echo "Compressing image for Pi..."
          xz -9v "$IMAGE_FILE"

          # Move to release assets
          cp "${IMAGE_FILE}.xz" ${GITHUB_WORKSPACE}/release-assets/cheeky-raspios-${VERSION}.img.xz
          sha256sum ${GITHUB_WORKSPACE}/release-assets/cheeky-raspios-${VERSION}.img.xz > ${GITHUB_WORKSPACE}/release-assets/cheeky-raspios-${VERSION}.img.xz.sha256

          echo "Pi image ready"
          ls -lh ${GITHUB_WORKSPACE}/release-assets/cheeky-raspios-${VERSION}.img.xz*

      - name: Create QEMU launcher bundles
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          REPO="${{ github.repository }}"
          mkdir -p qemu-build/{linux,macos,windows}

          # Copy and process QEMU scripts
          for dir in linux macos windows; do
            cp -r qemu/$dir/* qemu-build/$dir/

            # Rename templates
            [ -f "qemu-build/$dir/start-qemu.sh.template" ] && mv "qemu-build/$dir/start-qemu.sh.template" "qemu-build/$dir/start-qemu.sh"
            [ -f "qemu-build/$dir/start-qemu.bat.template" ] && mv "qemu-build/$dir/start-qemu.bat.template" "qemu-build/$dir/start-qemu.bat"

            # Replace placeholders
            for file in qemu-build/$dir/*; do
              if [ -f "$file" ]; then
                sed -i "s|VERSION_PLACEHOLDER|$VERSION|g" "$file"
                sed -i "s|REPO_PLACEHOLDER|$REPO|g" "$file"
              fi
            done
          done

          # Create README for QEMU bundles
          echo "Creating QEMU README..."
          for dir in qemu-build/{linux,macos,windows}; do
            echo "CHEEKY QEMU BUNDLE" > "$dir/README.txt"
            echo "==================" >> "$dir/README.txt"
            echo "" >> "$dir/README.txt"
            echo "This bundle runs Cheeky in QEMU using Raspberry Pi OS Lite." >> "$dir/README.txt"
            echo "" >> "$dir/README.txt"
            echo "Usage:" >> "$dir/README.txt"
            echo "1. Download cheeky-qemu-raspios-*.qcow2 from releases" >> "$dir/README.txt"
            echo "2. Place it in this directory" >> "$dir/README.txt"
            echo "3. Run launcher: ./start-qemu.sh or start-qemu.bat" >> "$dir/README.txt"
            echo "" >> "$dir/README.txt"
            echo "Access after boot (~1-2 minutes):" >> "$dir/README.txt"
            echo "- Radio: http://localhost:6680" >> "$dir/README.txt"
            echo "- Bluetooth: http://localhost:8080" >> "$dir/README.txt"
            echo "- SSH: ssh -p 2222 pi@localhost (password: raspberry)" >> "$dir/README.txt"
          done

          # Package bundles
          cd qemu-build
          tar czf ../release-assets/cheeky-qemu-linux-${VERSION}.tar.gz -C linux .
          tar czf ../release-assets/cheeky-qemu-macos-${VERSION}.tar.gz -C macos .
          cd windows && zip -r ../../release-assets/cheeky-qemu-windows-${VERSION}.zip . && cd ..

      - name: List release assets
        run: ls -lah release-assets/

      - name: Delete old release
        if: startsWith(github.ref, 'refs/tags/')
        run: gh release delete "${{ github.ref_name }}" -y 2>/dev/null || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Cheeky ${{ github.ref_name }}
          body: |
            ## Cheeky ${{ github.ref_name }}

            Lightweight Raspberry Pi OS-based internet radio system. Download, flash, boot - that's it!

            ### For Physical Raspberry Pi

            **Compatible with:** All Raspberry Pi models (Pi Zero 2 W, 3, 4, 5, 2, Zero W, 1)

            Download: `cheeky-raspios-${{ github.ref_name }}.img.xz`

            Flash with Raspberry Pi Imager, Balena Etcher, or `dd`:
            ```bash
            unxz cheeky-raspios-v1.0.0.img.xz
            sudo dd if=cheeky-raspios-v1.0.0.img of=/dev/sdX bs=4M status=progress
            sync
            ```

            Default credentials: `pi` / `raspberry`

            ### Test in QEMU (No Pi Needed)

            **Choose your platform:**

            | Platform | Download |
            |----------|----------|
            | Linux | `cheeky-qemu-linux-*.tar.gz` |
            | macOS | `cheeky-qemu-macos-*.tar.gz` |
            | Windows | `cheeky-qemu-windows-*.zip` |

            **Quick start:**
            ```bash
            tar xzf cheeky-qemu-linux-v1.0.0.tar.gz
            cd linux
            ./start-qemu.sh
            # First run downloads ~2GB image, subsequent runs start immediately
            # Access: http://localhost:6680 (radio) http://localhost:8080 (Bluetooth)
            # SSH: ssh -p 2222 pi@localhost (password: raspberry)
            ```
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
