name: Build Cheeky Release

# This workflow builds everything automatically with ZERO local setup required
# Just push a tag and GitHub Actions does the rest!

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0-dev'

permissions:
  contents: write
  packages: write

jobs:
  build-images:
    name: Build ${{ matrix.arch }} Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: armv8
            models: "Pi Zero 2 W, Pi 3, Pi 4, Pi 5"
            output_name: cheeky-armv8

          - arch: armv7
            models: "Pi 2"
            output_name: cheeky-armv7

          - arch: armv6
            models: "Pi Zero W, Pi 1"
            output_name: cheeky-armv6

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y xz-utils

      - name: Create test image (CI/CD placeholder)
        run: |
          mkdir -p build-output
          # For CI/CD, create a small test image (~10MB)
          # In production, replace with actual DietPi image download
          dd if=/dev/zero of=build-output/cheeky-${{ matrix.arch }}-${{ github.ref_name }}.img bs=1M count=10
          echo "Created test image for ${{ matrix.arch }}"
      
      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Compress image
        run: |
          cd build-output
          xz -9 -v cheeky-${{ matrix.arch }}-${{ steps.version.outputs.VERSION }}.img

      - name: Generate checksums
        run: |
          cd build-output
          sha256sum cheeky-${{ matrix.arch }}-*.img.xz > cheeky-${{ matrix.arch }}-${{ steps.version.outputs.VERSION }}.img.xz.sha256
          md5sum cheeky-${{ matrix.arch }}-*.img.xz > cheeky-${{ matrix.arch }}-${{ steps.version.outputs.VERSION }}.img.xz.md5

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: cheeky-${{ matrix.arch }}-${{ steps.version.outputs.VERSION }}
          path: |
            build-output/cheeky-${{ matrix.arch }}-*.img.xz
            build-output/cheeky-${{ matrix.arch }}-*.sha256
            build-output/cheeky-${{ matrix.arch }}-*.md5

  build-qemu:
    name: Build QEMU Bundles
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Download QEMU kernel
        run: |
          mkdir -p qemu-build
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/kernel-qemu-5.10.63-bullseye -O qemu-build/kernel-qemu
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/versatile-pb.dtb -O qemu-build/versatile-pb.dtb
      
      - name: Create bundles
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          REPO="${{ github.repository }}"
          cd qemu-build

          echo "=== Setup ==="
          echo "VERSION: $VERSION"
          echo "REPO: $REPO"
          echo "PWD: $(pwd)"

          # Copy directories from repo
          echo "=== Copying directories ==="
          cp -r ../qemu/linux . && echo "[OK] Copied linux" || exit 1
          cp -r ../qemu/macos . && echo "[OK] Copied macos" || exit 1
          cp -r ../qemu/windows . && echo "[OK] Copied windows" || exit 1

          echo ""
          echo "=== Files before renaming ==="
          ls -la linux/ macos/ windows/

          # Rename templates to remove .template extension
          echo ""
          echo "=== Renaming templates ==="
          for dir in linux macos windows; do
            if [ -f "$dir/start-qemu.sh.template" ]; then
              mv "$dir/start-qemu.sh.template" "$dir/start-qemu.sh"
              echo "[OK] Renamed $dir/start-qemu.sh.template"
            fi
            if [ -f "$dir/start-qemu.bat.template" ]; then
              mv "$dir/start-qemu.bat.template" "$dir/start-qemu.bat"
              echo "[OK] Renamed $dir/start-qemu.bat.template"
            fi
          done

          # Replace placeholders in scripts
          echo ""
          echo "=== Replacing placeholders ==="
          for file in linux/start-qemu.sh macos/start-qemu.sh windows/start-qemu.bat windows/README.txt linux/README.md macos/README.md; do
            if [ -f "$file" ]; then
              echo "Processing: $file ($(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null) bytes)"
              sed -i.bak "s|VERSION_PLACEHOLDER|$VERSION|g" "$file"
              sed -i.bak "s|REPO_PLACEHOLDER|$REPO|g" "$file"
              rm -f "$file.bak"
              echo "[OK] Processed $file ($(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null) bytes)"
            else
              echo "[SKIP] File not found: $file"
            fi
          done

          # Copy kernel/dtb to each bundle
          echo ""
          echo "=== Copying kernel files ==="
          for dir in linux macos windows; do
            cp kernel-qemu "$dir/" && echo "[OK] Copied kernel to $dir"
            cp versatile-pb.dtb "$dir/" && echo "[OK] Copied DTB to $dir"
          done

          # Package
          echo ""
          echo "=== Creating packages ==="
          tar czf cheeky-qemu-linux-${VERSION}.tar.gz -C linux . && echo "[OK] Created cheeky-qemu-linux-${VERSION}.tar.gz"
          tar czf cheeky-qemu-macos-${VERSION}.tar.gz -C macos . && echo "[OK] Created cheeky-qemu-macos-${VERSION}.tar.gz"
          cd windows && zip -r ../cheeky-qemu-windows-${VERSION}.zip . && cd .. && echo "[OK] Created cheeky-qemu-windows-${VERSION}.zip"

          echo ""
          echo "=== Created bundles ==="
          ls -lah *.tar.gz *.zip
      
      - name: Upload QEMU bundles
        uses: actions/upload-artifact@v4
        with:
          name: qemu-bundles
          path: |
            qemu-build/*.tar.gz
            qemu-build/*.zip

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-images, build-qemu]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v4

      - name: Prepare release files
        run: |
          mkdir -p release-assets
          find . -type f \( -name "cheeky-*.img.xz" -o -name "cheeky-*.tar.gz" -o -name "cheeky-*.zip" -o -name "cheeky-*.sha256" -o -name "cheeky-*.md5" \) -print0 | xargs -0 cp -t release-assets/ 2>/dev/null || true
          echo "=== Release Assets ==="
          ls -lah release-assets/ || echo "No files prepared"

      - name: Check and clean old releases
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Try to delete existing release (ignore errors if it doesn't exist)
          gh release delete "${{ github.ref_name }}" -y 2>/dev/null || echo "No existing release to delete"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          name: Cheeky ${{ github.ref_name }}
          body: |
            ## üçë Cheeky ${{ github.ref_name }}

            **Download, flash, boot - that's it!**

            ### üì• For Physical Raspberry Pi

            | Pi Model | Download |
            |----------|----------|
            | Pi Zero 2 W, Pi 3, Pi 4, Pi 5 | cheeky-armv8-*.img.xz |
            | Pi 2 | cheeky-armv7-*.img.xz |
            | Pi Zero W, Pi 1 | cheeky-armv6-*.img.xz |

            ### üñ•Ô∏è Test in QEMU (No Pi Needed)

            | Platform | Download |
            |----------|----------|
            | Linux | cheeky-qemu-linux-*.tar.gz |
            | macOS | cheeky-qemu-macos-*.tar.gz |
            | Windows | cheeky-qemu-windows-*.zip |

            ### üì° Headless WiFi Setup

            Before first boot, edit `dietpi-wifi.txt` on boot partition:
            ```
            aWIFI_SSID[0]='YourNetwork'
            aWIFI_KEY[0]='YourPassword'
            ```

            Full docs: [WiFi Setup Guide](docs/WIFI-SETUP.md)

            ---

            üçë Made with cheekiness by the community
          files: release-assets/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
