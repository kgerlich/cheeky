name: Build Cheeky Release

# This workflow builds everything automatically with ZERO local setup required
# Just push a tag and GitHub Actions does the rest!

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0-dev'

env:
  DIETPI_BASE_URL: https://dietpi.com/downloads/images

jobs:
  build-images:
    name: Build ${{ matrix.arch }} Image
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - arch: armv8
            models: "Pi Zero 2 W, Pi 3, Pi 4, Pi 5"
            dietpi_image: DietPi_RPi-ARMv8-Bookworm.7z
            output_name: cheeky-armv8
            
          - arch: armv7
            models: "Pi 2"
            dietpi_image: DietPi_RPi-ARMv7-Bookworm.7z
            output_name: cheeky-armv7
            
          - arch: armv6
            models: "Pi Zero W, Pi 1"
            dietpi_image: DietPi_RPi-ARMv6-Bookworm.7z
            output_name: cheeky-armv6
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Install build tools
        run: |
          sudo apt-get update
          sudo apt-get install -y p7zip-full kpartx qemu-user-static parted xz-utils dosfstools wget curl
      
      - name: Cache DietPi base
        uses: actions/cache@v3
        with:
          path: base-images/
          key: dietpi-${{ matrix.arch }}-${{ hashFiles('scripts/versions.txt') }}
      
      - name: Download DietPi
        run: |
          mkdir -p base-images && cd base-images
          if [ ! -f "${{ matrix.arch }}.img" ]; then
            wget -q --show-progress "${DIETPI_BASE_URL}/${{ matrix.dietpi_image }}"
            7z x -y "${{ matrix.dietpi_image }}"
            rm "${{ matrix.dietpi_image }}"
            mv *.img "${{ matrix.arch }}.img"
          fi
      
      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Build image
        run: |
          chmod +x scripts/build.sh
          sudo scripts/build.sh \
            --arch ${{ matrix.arch }} \
            --base-image base-images/${{ matrix.arch }}.img \
            --output ${{ matrix.output_name }}-${{ steps.version.outputs.VERSION }}.img \
            --version ${{ steps.version.outputs.VERSION }}
      
      - name: Compress
        run: xz -9 -T0 -v ${{ matrix.output_name }}-${{ steps.version.outputs.VERSION }}.img
      
      - name: Checksums
        run: |
          sha256sum ${{ matrix.output_name }}-*.img.xz > ${{ matrix.output_name }}-${{ steps.version.outputs.VERSION }}.img.xz.sha256
          md5sum ${{ matrix.output_name }}-*.img.xz > ${{ matrix.output_name }}-${{ steps.version.outputs.VERSION }}.img.xz.md5
      
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.output_name }}-image
          path: |
            ${{ matrix.output_name }}-*.img.xz
            ${{ matrix.output_name }}-*.sha256
            ${{ matrix.output_name }}-*.md5

  build-qemu:
    name: Build QEMU Bundles
    runs-on: ubuntu-latest
    needs: build-images
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi
      
      - name: Download QEMU kernel
        run: |
          mkdir -p qemu-build
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/kernel-qemu-5.10.63-bullseye -O qemu-build/kernel-qemu
          wget -q https://github.com/dhruvvyas90/qemu-rpi-kernel/raw/master/versatile-pb.dtb -O qemu-build/versatile-pb.dtb
      
      - name: Create bundles
        run: |
          VERSION="${{ steps.version.outputs.VERSION }}"
          REPO="${{ github.repository }}"
          cd qemu-build
          
          # Copy templates from repo
          cp -r ../qemu/* .
          
          # Replace placeholders in scripts
          for file in linux/start-qemu.sh macos/start-qemu.sh windows/start-qemu.bat windows/README.txt linux/README.md macos/README.md; do
            sed -i "s|VERSION_PLACEHOLDER|$VERSION|g" "$file" 2>/dev/null || sed -i '' "s|VERSION_PLACEHOLDER|$VERSION|g" "$file"
            sed -i "s|REPO_PLACEHOLDER|$REPO|g" "$file" 2>/dev/null || sed -i '' "s|REPO_PLACEHOLDER|$REPO|g" "$file"
          done
          
          # Copy kernel/dtb to each bundle
          for dir in linux macos windows; do
            cp kernel-qemu $dir/
            cp versatile-pb.dtb $dir/
          done
          
          # Package
          tar czf cheeky-qemu-linux-${VERSION}.tar.gz -C linux .
          tar czf cheeky-qemu-macos-${VERSION}.tar.gz -C macos .
          cd windows && zip -r ../cheeky-qemu-windows-${VERSION}.zip . && cd ..
      
      - name: Upload
        uses: actions/upload-artifact@v3
        with:
          name: qemu-bundles
          path: qemu-build/*.{tar.gz,zip}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-images, build-qemu]
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          name: Cheeky ${GITHUB_REF#refs/tags/}
          body: |
            ## üçë Cheeky ${GITHUB_REF#refs/tags/}
            
            **Download, flash, boot - that's it!**
            
            ### üì• For Physical Raspberry Pi
            
            | Pi Model | Download |
            |----------|----------|
            | Pi Zero 2 W, Pi 3, Pi 4, Pi 5 | cheeky-armv8-*.img.xz |
            | Pi 2 | cheeky-armv7-*.img.xz |
            | Pi Zero W, Pi 1 | cheeky-armv6-*.img.xz |
            
            ### üñ•Ô∏è Test in QEMU (No Pi Needed)
            
            | Platform | Download |
            |----------|----------|
            | Linux | cheeky-qemu-linux-*.tar.gz |
            | macOS | cheeky-qemu-macos-*.tar.gz |
            | Windows | cheeky-qemu-windows-*.zip |
            
            ### üì° Headless WiFi Setup
            
            Before first boot, edit `dietpi-wifi.txt` on boot partition:
            ```
            aWIFI_SSID[0]='YourNetwork'
            aWIFI_KEY[0]='YourPassword'
            ```
            
            Full docs: [WiFi Setup Guide](docs/WIFI-SETUP.md)
            
            ---
            
            üçë Made with cheekiness by the community
          files: |
            */*.img.xz
            */*.sha256
            */*.md5
            */*.tar.gz
            */*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
