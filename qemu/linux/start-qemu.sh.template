#!/bin/bash
# Cheeky QEMU Launcher for Linux/macOS
# Downloads and runs the Cheeky image in QEMU
# No complex setup required - just run this script!
#
# Usage:
#   ./start-qemu.sh [QEMU_DIR]
#
# Arguments:
#   QEMU_DIR - Directory containing QEMU files (default: script directory)
#
# The working directory is always the current directory where the script is run from.

set -e

VERSION="VERSION_PLACEHOLDER"
REPO="REPO_PLACEHOLDER"
IMAGE_FILE="cheeky-qemu-debian-${VERSION}.qcow2"
IMAGE_URL="https://github.com/${REPO}/releases/download/${VERSION}/${IMAGE_FILE}"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
QEMU_DIR="${1:-$SCRIPT_DIR}"
WORK_DIR="$(pwd)"

echo "=========================================="
echo "Cheeky QEMU Launcher"
echo "=========================================="
echo ""
echo "QEMU Dir: $QEMU_DIR"
echo "Work Dir: $WORK_DIR"
echo ""

# Check QEMU is installed
if ! command -v qemu-system-aarch64 &> /dev/null; then
    echo "Error: QEMU is not installed"
    echo ""
    echo "Install QEMU:"
    echo "  Linux (Ubuntu/Debian): sudo apt-get install qemu-system-arm"
    echo "  macOS: brew install qemu"
    echo ""
    exit 1
fi

# Download image if needed
if [ ! -f "$IMAGE_FILE" ]; then
    echo "Downloading Cheeky QEMU image (approximately 1.5GB)..."
    echo "From: $IMAGE_URL"
    echo ""

    if [ -n "$GITHUB_TOKEN" ]; then
        echo "Using GitHub authentication..."
        wget -q --show-progress --header="Authorization: Bearer $GITHUB_TOKEN" "$IMAGE_URL" || {
            echo "Download failed"
            exit 1
        }
    else
        wget -q --show-progress "$IMAGE_URL" || {
            echo "Download failed"
            echo ""
            echo "If repository is private, set GITHUB_TOKEN environment variable:"
            echo "  export GITHUB_TOKEN=your_personal_access_token"
            echo "  ./start-qemu.sh"
            exit 1
        }
    fi
fi

echo ""
echo "Starting QEMU..."
echo "This may take 1-2 minutes to boot"
echo ""
echo "Once booted, open in your browser:"
echo "  Radio: http://localhost:6680"
echo "  Bluetooth Manager: http://localhost:8080"
echo "  SSH: ssh -p 2222 debian@localhost (password: cheeky)"
echo ""

# Read root filesystem UUID for robust device identification
ROOT_UUID=$(cat "$QEMU_DIR/root-uuid.txt")
echo "Using root filesystem UUID: $ROOT_UUID"
echo ""

# Run QEMU with direct kernel boot (bypasses UEFI firmware requirement)
qemu-system-aarch64 \
    -nographic \
    -machine virt \
    -cpu cortex-a72 \
    -m 2048 \
    -kernel "$QEMU_DIR/vmlinuz" \
    -initrd "$QEMU_DIR/initrd.img" \
    -append "root=UUID=$ROOT_UUID console=ttyAMA0 rw" \
    -drive "file=$IMAGE_FILE,if=none,format=qcow2,id=hd" \
    -device virtio-blk-device,drive=hd \
    -drive "file=$QEMU_DIR/seed.iso,if=none,format=raw,id=seed" \
    -device virtio-blk-device,drive=seed \
    -netdev "user,id=net0,hostfwd=tcp::6680-:6680,hostfwd=tcp::8080-:8080,hostfwd=tcp::2222-:22" \
    -device virtio-net-device,netdev=net0

echo ""
echo "=========================================="
echo "QEMU has exited"
echo "=========================================="
