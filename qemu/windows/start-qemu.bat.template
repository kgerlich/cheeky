@echo off
REM Cheeky QEMU Launcher for Windows
REM Downloads and runs the Cheeky image in QEMU
REM
REM Usage:
REM   start-qemu.bat [QEMU_DIR]
REM
REM Arguments:
REM   QEMU_DIR - Directory containing QEMU files (default: script directory)
REM
REM The working directory is always the current directory where the script is run from.

setlocal enabledelayedexpansion

set VERSION=VERSION_PLACEHOLDER
set REPO=REPO_PLACEHOLDER
set IMAGE_FILE=cheeky-armv8-!VERSION!.img
set IMAGE_XZ=!IMAGE_FILE!.xz
set IMAGE_URL=https://github.com/!REPO!/releases/download/!VERSION!/!IMAGE_XZ!

REM Set directories
set SCRIPT_DIR=%~dp0
set WORK_DIR=%cd%

REM Set QEMU directory from parameter or default to script directory
if "%~1"=="" (
    set QEMU_DIR=!SCRIPT_DIR:~0,-1!
) else (
    set QEMU_DIR=%~1
)

echo ==========================================
echo Cheeky QEMU Launcher for Windows
echo ==========================================
echo.
echo QEMU Dir: !QEMU_DIR!
echo Work Dir: !WORK_DIR!
echo.

REM Check if QEMU exists
set QEMU_EXE=!QEMU_DIR!\qemu-system-aarch64.exe
if not exist "!QEMU_EXE!" (
    echo Error: QEMU not found
    echo Expected: !QEMU_EXE!
    echo.
    echo Please download QEMU from https://qemu.weilnetz.de/
    echo Run: start-qemu.bat "C:\path\to\qemu"
    echo.
    pause
    exit /b 1
)

REM Download image if needed
if not exist "!IMAGE_FILE!" (
    if not exist "!IMAGE_XZ!" (
        echo Downloading Cheeky image approximately 180MB...
        echo From: !IMAGE_URL!

        REM Try download with authentication if GITHUB_TOKEN is set
        if defined GITHUB_TOKEN (
            echo Using GitHub authentication...
            powershell -Command "$headers = @{'Authorization'='Bearer !GITHUB_TOKEN!'}; Invoke-WebRequest -Uri '!IMAGE_URL!' -OutFile '!IMAGE_XZ!' -Headers $headers -UseBasicParsing"
        ) else (
            echo Downloading without authentication. Set GITHUB_TOKEN env var if repository is private.
            powershell -Command "Invoke-WebRequest -Uri '!IMAGE_URL!' -OutFile '!IMAGE_XZ!' -UseBasicParsing"
        )

        if !errorlevel! neq 0 (
            echo Download failed
            if not defined GITHUB_TOKEN (
                echo.
                echo If repository is private, set GITHUB_TOKEN environment variable:
                echo   set GITHUB_TOKEN=your_personal_access_token
                echo   start-qemu.bat "C:\path\to\qemu"
            )
            pause
            exit /b 1
        )
    )

    echo Extracting image...
    7z x "!IMAGE_XZ!" 2>nul
    if !errorlevel! neq 0 (
        echo Extraction failed
        echo.
        echo 7-Zip is required but not found on this system.
        echo.
        echo Install 7-Zip:
        echo   Option 1: Download from https://www.7-zip.org/download.html
        echo   Option 2: winget install 7zip
        echo   Option 3: choco install 7zip
        echo.
        pause
        exit /b 1
    )
)

REM Resize image if needed
if not exist "!IMAGE_FILE!.resized" (
    echo Resizing image...
    "!QEMU_DIR!\qemu-img.exe" resize "!IMAGE_FILE!" +2G
    type nul > "!IMAGE_FILE!.resized"
)

echo.
echo Starting QEMU...
echo This may take 30-60 seconds to boot
echo.
echo Once booted, open in your browser:
echo   Radio: http://localhost:6680
echo   Bluetooth Manager: http://localhost:8080
echo   SSH: ssh -p 2222 root@localhost password: raspberry
echo.

REM Run QEMU with port forwarding and serial console output
"!QEMU_DIR!\qemu-system-aarch64.exe" ^
    -nographic ^
    -machine virt ^
    -cpu cortex-a72 ^
    -m 2048 ^
    -kernel "!SCRIPT_DIR!kernel-qemu" ^
    -append "root=/dev/vda2 rootfstype=ext4 rw console=ttyAMA0" ^
    -drive file="!IMAGE_FILE!",if=none,format=raw,id=hd ^
    -device virtio-blk-device,drive=hd ^
    -netdev user,id=net0,hostfwd=tcp::6680-:6680,hostfwd=tcp::8080-:8080,hostfwd=tcp::2222-:22 ^
    -device virtio-net-device,netdev=net0 ^
    -serial stdio

echo.
echo ==========================================
echo QEMU has exited
echo ==========================================
echo.
pause
