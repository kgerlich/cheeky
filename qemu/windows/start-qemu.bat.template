@echo off
REM Cheeky QEMU Launcher for Windows
REM Downloads and runs QEMU image with Cheeky pre-installed

setlocal enabledelayedexpansion

set VERSION=VERSION_PLACEHOLDER
set REPO=REPO_PLACEHOLDER
set IMAGE_FILE=cheeky-qemu-ubuntu-minimal-!VERSION!.qcow2
set IMAGE_URL=https://github.com/!REPO!/releases/download/!VERSION!/!IMAGE_FILE!

echo ==========================================
echo Cheeky QEMU Launcher for Windows
echo ==========================================
echo.
echo Image: !IMAGE_FILE!
echo.

REM Download image if needed
if not exist "!IMAGE_FILE!" (
    echo Downloading image, please wait...
    echo.
    powershell -Command "Import-Module BitsTransfer; Start-BitsTransfer -Source '!IMAGE_URL!' -Destination '!IMAGE_FILE!'; Get-BitsTransfer | where {$_.JobState -eq 'Transferred'} | Complete-BitsTransfer" 2>nul

    if !errorlevel! neq 0 (
        powershell -Command "Invoke-WebRequest -Uri '!IMAGE_URL!' -OutFile '!IMAGE_FILE!' -UseBasicParsing" 2>nul
    )

    if not exist "!IMAGE_FILE!" (
        echo.
        echo Download failed. Make sure you have internet access.
        echo.
        pause
        exit /b 1
    )
)

echo.
echo Starting QEMU...
echo Boot time: 1-2 minutes
echo.
echo Access after boot:
echo - Radio: http://localhost:6680
echo - Bluetooth: http://localhost:8080
echo - SSH: ssh -p 2222 root@localhost
echo.

REM Set QEMU directory from parameter or use qemu-system-aarch64 from PATH
if "%~1"=="" (
    set QEMU_EXE=qemu-system-aarch64.exe
) else (
    set QEMU_EXE=%~1\qemu-system-aarch64.exe
)

"!QEMU_EXE!" ^
    -nographic ^
    -machine virt ^
    -cpu cortex-a72 ^
    -m 2048 ^
    -drive file="!IMAGE_FILE!",if=none,format=qcow2,id=hd ^
    -device virtio-blk-device,drive=hd ^
    -netdev user,id=net0,hostfwd=tcp::6680-:6680,hostfwd=tcp::8080-:8080,hostfwd=tcp::2222-:22 ^
    -device virtio-net-device,netdev=net0 ^
    -serial telnet:localhost:4555,server,nowait

echo.
echo QEMU has exited
echo.
pause
